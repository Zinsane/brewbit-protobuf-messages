import "nanopb.proto";

// Sent by the server to provide the current time to the unit
message ServerTime {
  required int32 timestamp = 1;
}

// Sent by device to initiate activation process
message ActivationTokenRequest {
  required string device_id = 1 [(nanopb).max_size = 64];
}

// Sent by server in response to ActivationTokenRequest
message ActivationTokenResponse {
  optional string activation_token = 1  [(nanopb).max_size = 64]; // Not present on error
}

// Sent by server once activation is completed by user
message ActivationNotification {
  required string auth_token = 1  [(nanopb).max_size = 64];
}

message AuthRequest {
  required string device_id  = 1  [(nanopb).max_size = 64];
  required string auth_token = 2  [(nanopb).max_size = 64];
}

message AuthResponse {
  required bool authenticated = 1;
}

message ControllerReport {
  required uint32 controller_index = 1;
  required float sensor_reading    = 2;
  required float setpoint          = 3;
  optional uint32 timestamp        = 4;
}

message DeviceReport {
  repeated ControllerReport controller_reports = 1 [(nanopb).max_count = 64];
}

message Error {
  required uint32 code = 1 ;
  required string body = 2 [(nanopb).max_size = 64];
}

// @current_version Current firmware version on device
message FirmwareUpdateCheckRequest {
  required string current_version = 1 [(nanopb).max_size = 16];
}

// @update_available true if there is a newer version, false otherwise
// @version if update is available, version string for the latest version
// @binary_size size, in bytes, of the binary update
message FirmwareUpdateCheckResponse {
  required bool   update_available = 1;
  optional string version          = 2 [(nanopb).max_size = 16];
  optional uint32 binary_size      = 3;
}

// @requested_version version string to update to
message FirmwareDownloadRequest {
  required string requested_version = 1 [(nanopb).max_size = 16];
  required uint32 offset            = 2;
  required uint32 size              = 3;
}

// @offset offset in binary update file, in bytes
// @data byte buffer of the binary update file
message FirmwareDownloadResponse {
  required uint32 offset = 1;
  required bytes  data   = 2 [(nanopb).max_size = 1024];
}

message DeviceSettings {
  enum ControlMode {
    ON_OFF = 0;
    PID    = 1;
  }

  required string name              = 1 [(nanopb).max_size = 100];
  required ControlMode control_mode = 2;
  required float hysteresis         = 3;
}

message TempProfileStep {
  enum TempProfileStepType {
  	HOLD = 0;
  	RAMP = 1;
  }

  required uint32 duration          = 1;
  required float value              = 2;
  required TempProfileStepType type = 3;
}

message TempProfile {
  required uint32 id             = 1;
  required string name           = 2 [(nanopb).max_size = 100];
  required float start_value     = 3;
  repeated TempProfileStep steps = 4 [(nanopb).max_count = 32];
}

message OutputSettings {
  enum Function {
    HEATING = 0;
    COOLING = 1;
    MANUAL  = 2;
  }

  required uint32 index       = 1;
  required Function function  = 2;
  required uint32 cycle_delay = 3;
}

message ControllerSettings {
  enum SetpointType{
    STATIC  = 0;
    TEMP_PROFILE = 1;
  }

  // Session settings
  required string name                    = 1 [(nanopb).max_size = 100];

  // Controller settings
  required uint32       sensor_index      = 2;
  required SetpointType setpoint_type     = 3;
  optional float        static_setpoint   = 4;
  optional uint32       temp_profile_id   = 5;

  // Output settings
  repeated OutputSettings output_settings = 6 [(nanopb).max_count = 2];

  // Temp profiles
  repeated TempProfile temp_profiles      = 7 [(nanopb).max_count = 2];
}

message ApiMessage {
  enum Type {
    ACTIVATION_TOKEN_REQUEST       = 1;
    ACTIVATION_TOKEN_RESPONSE      = 2;
    ACTIVATION_NOTIFICATION        = 3;
    AUTH_REQUEST                   = 4;
    AUTH_RESPONSE                  = 5;
    DEVICE_REPORT                  = 6;
    ERROR                          = 7;
    FIRMWARE_UPDATE_CHECK_REQUEST  = 8;
    FIRMWARE_UPDATE_CHECK_RESPONSE = 9;
    FIRMWARE_DOWNLOAD_REQUEST      = 10;
    FIRMWARE_DOWNLOAD_RESPONSE     = 11;
    DEVICE_SETTINGS                = 12;
    CONTROLLER_SETTINGS            = 13;
    SERVER_TIME                    = 14;
  }

  required Type type = 1;

  optional ActivationTokenRequest      activationTokenRequest      = 2;
  optional ActivationTokenResponse     activationTokenResponse     = 3;
  optional ActivationNotification      activationNotification      = 4;
  optional AuthRequest                 authRequest                 = 5;
  optional AuthResponse                authResponse                = 6;
  optional DeviceReport                deviceReport                = 7;
  optional Error                       error                       = 8;
  optional FirmwareUpdateCheckRequest  firmwareUpdateCheckRequest  = 9;
  optional FirmwareUpdateCheckResponse firmwareUpdateCheckResponse = 10;
  optional FirmwareDownloadRequest     firmwareDownloadRequest     = 11;
  optional FirmwareDownloadResponse    firmwareDownloadResponse    = 12;
  optional DeviceSettings              deviceSettings              = 13;
  optional ControllerSettings          controllerSettings          = 14;
  optional ServerTime                  serverTime                  = 15;
}
