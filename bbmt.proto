import "nanopb.proto";

// Sent by device to initiate activation process
message ActivationTokenRequest {
  required string device_id = 1 [(nanopb).max_size = 64];
}

// Sent by server in response to ActivationTokenRequest
message ActivationTokenResponse {
  optional string activation_token = 1  [(nanopb).max_size = 64]; // Not present on error
}

// Sent by server once activation is completed by user
message ActivationNotification {
  required string auth_token = 1  [(nanopb).max_size = 64];
}

message AuthRequest {
  required string device_id         = 1  [(nanopb).max_size = 64];
  required string activation_token  = 2  [(nanopb).max_size = 64];
}

message AuthResponse {
  required bool authenticated = 1;
}

message ProbeReport {
  required uint32 id    = 1;
  required float value  = 2;
}

message DeviceReport {
  repeated ProbeReport probeReport = 1 [(nanopb).max_count = 8];
}

message Error {
  required uint32 code = 1 ;
  required string body = 2 [(nanopb).max_size = 64];
}

// @current_version Current firmware version on device
message UpdateCheckRequest {
  required string current_version = 1 [(nanopb).max_size = 16];
}

// @update_available true if there is a newer version, false otherwise
// @version if update is available, version string for the latest version
// @binary_size size, in bytes, of the binary update
message UpdateCheckResponse {
  required bool   update_available = 1;
  optional string version          = 2 [(nanopb).max_size = 16];
  optional uint32 binary_size      = 3;
}

// @requested_version version string to update to
message UpdateRequest {
  required string requested_version = 1 [(nanopb).max_size = 16];
}

// @offset offset in binary update file, in bytes
// @data byte buffer of the binary update file
message UpdateChunk {
  required uint32 offset = 1;
  required bytes  data   = 2 [(nanopb).max_size = 1024];
}

message ApiMessage {
  enum Type {
    ACTIVATION_TOKEN_REQUEST  = 1;
    ACTIVATION_TOKEN_RESPONSE = 2;
    ACTIVATION_NOTIFICATION   = 3;
    AUTH_REQUEST              = 4;
    AUTH_RESPONSE             = 5;
    DEVICE_REPORT             = 6;
    ERROR                     = 7;
    UPDATE_REQUEST            = 8;
    UPDATE_CHUNK              = 9;
  }

  required Type type = 1;

  optional ActivationTokenRequest  activationTokenRequest   = 2;
  optional ActivationTokenResponse activationTokenResponse  = 3;
  optional ActivationNotification  activationNotification   = 4;
  optional AuthRequest             authRequest              = 5;
  optional AuthResponse            authResponse             = 6;
  optional DeviceReport            deviceReport             = 7;
  optional Error                   error                    = 8;
  optional UpdateRequest           updateRequest            = 9;
  optional UpdateChunk             updateChunk              = 10;
}
